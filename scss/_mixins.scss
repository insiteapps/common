@import "flex";

@mixin bp-xlarge {
  @media only screen and (min-width: 992px) {
    @content;
  }
}

@mixin bp-large {
  @media only screen and (max-width: 992px) {
    @content;
  }
}

@mixin bp-medium {
  @media (min-width: 767px) and (max-width: 992px) {
    @content;
  }
}

@mixin bp-desktop {
  @media only screen and (min-width: 767px) {
    @content;
  }
}

@mixin bp-small {
  @media only screen and (max-width: 767px) {
    @content;
  }
}

@mixin bp-smaller {
  @media only screen and (max-width: 480px) {
    @content;
  }
}

@mixin vertical-align($position: relative) {
  position: $position;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;
}

@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// Requires inline-block or block for proper styling
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin backface-visibility($arguments) {
  -webkit-backface-visibility: $arguments;
  -moz-backface-visibility: $arguments;
  -ms-backface-visibility: $arguments;
  -o-backface-visibility: $arguments;
  backface-visibility: $arguments;
}

@mixin float-full($float: left) {
  width: 100%;
  float: $float;
  position: relative;
}

@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model; // Safari <= 5
  -moz-box-sizing: $box-model; // Firefox <= 19
  box-sizing: $box-model;
}

// Single side border-radius

@mixin border-top-radius($radius) {
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}

@mixin border-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  background-clip: padding-box;
}

@mixin border-bottom-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  background-clip: padding-box;
}

@mixin border-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}

/* @include opacity(0.8);*/
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

/* @include center-block;*/
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

@mixin font-size($sizeValue: 13) {
  font-size: $sizeValue + px; //fallback for old browsers
  font-size: (0.1 * $sizeValue) + rem;
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow: inset $top $left $blur $color;
    -moz-box-shadow: inset $top $left $blur $color;
    box-shadow: inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

@mixin box-shadow-none {
  -moz-box-shadow: none;
  -webkit-box-shadow: none;
  box-shadow: none;
}

@mixin text-field {
  display: inline-block;
  outline: none;
  text-decoration: none;
  font: 14px/100% Arial, Helvetica, sans-serif;
  padding: .5em;
  text-shadow: 0 1px 1px rgba(0, 0, 0, .3);
  @include rounded();
  @include box-shadow(0, 1px, 2px, rgba(0, 0, 0, 0.2));
}

@mixin button($color: $red, $text_color: $white) {
  display: inline-block;
  outline: none;
  cursor: pointer;
  text-align: center;
  text-decoration: none;
  padding: .5em 2em .55em;
  text-shadow: 0 1px 1px rgba(0, 0, 0, .3);
  @include rounded();
  @include box-shadow(0, 1px, 2px, rgba(0, 0, 0, 0.2));

  color: $text_color !important;
  font-weight: normal;
  border: solid 1px darken($color, 18%);
  background-color: $color;
  @include gradient(saturate($color, 15%), darken($color, 15%));

  &:hover {
    text-decoration: none;
    background: saturate($color, 10%);
    @include gradient(saturate($color, 5%), darken($color, 5%));
  }

  &:active {
    position: relative;
    top: 1px;
    color: saturate($color, 15%);
    @include gradient(saturate($color, 15%), lighten($color, 15%));
  }
}

@mixin transform( $value ) {
  @include prefix(transform, $value);
}

@mixin transform-origin( $value ) {
  @include prefix(transform-origin, $value);
}

@mixin buttonColor( $name, $color ) {
  &[data-color=#{$name}] {
    background: $color;

    &:hover {
      background-color: lighten($color, 5%);
    }
  }
}

@mixin rounded($radius: 0.5em) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

@mixin gradient($from, $to) {
  background: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
  background: -moz-linear-gradient(top, $from, $to);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}');
}

// Setup the function in your functions or helpers files, wherever you keep these bits.
@function headings($from: 1, $to: 6) {
  @if $from == $to {
    @return 'h#{$from}';
  } @else {
    @return 'h#{$from},' + headings($from+1, $to);
  }
}

@mixin doubleborder($side, $innerColor, $outerColor) {
  $shadow: "0 0 0";
  border-#{$side}: 1px solid $innerColor;
  @if ($side == "top") {
    $shadow: 0 -1px 0;
  }
  @if ($side == "right") {
    $shadow: 1px 0 0;
  }
  @if ($side == "bottom") {
    $shadow: 0 1px 0;
  }
  @if ($side == "left") {
    $shadow: -1px 0 0;
  }
  -webkit-box-shadow: $shadow $outerColor;
  -moz-box-shadow: $shadow $outerColor;
  -o-box-shadow: $shadow $outerColor;
  box-shadow: $shadow $outerColor;
}

@mixin transition($properties: margin 0.3s ease-in 0s) {
  -moz-transition: $properties;
  -webkit-transition: $properties;
  -o-transition: $properties;
  transition: $properties;
}

@mixin duration($time, $webkit:true) {
  @if ($webkit) {
    -webkit-transition-duration: $time;
  }
  -moz-transition-duration: $time;
  -o-transition-duration: $time;
  transition-duration: $time;
}

@mixin transform($prop) {
  -webkit-transform: $prop;
  -moz-transform: $prop;
  -ms-transform: $prop;
  -o-transform: $prop;
  transform: $prop;
}

@mixin animation($animation) {
  -webkit-animation: $animation;
  -o-animation: $animation;
  animation: $animation;
}
